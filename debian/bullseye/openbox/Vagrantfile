# -*- mode: ruby -*-
# vi: set ft=ruby :

# A unique label for this VM.
$vm_id = 'debian-bullseye-openbox'

# Load user's defaults and vm-specific options.
if File.directory?(my_config_dir = File.join(Dir.home, '.config', 'vagrant'))
    if File.file?(my_defaults = File.join(my_config_dir, 'defaults.rb'))
        load my_defaults
    end
end

# Set up a minimal openbox environment with VirtualBox Guest Additions.
Vagrant.configure("2") do |config|

    config.vm.box                   = "debian/bullseye64"
    config.vm.box_check_update      = false
  
    # Configure VirtualBox for desktop application use.
    config.vm.provider "virtualbox" do |vb|
        vb.gui                      = true
        vb.memory                   = 1024
        vb.cpus                     = 1
        vb.check_guest_additions    = false
        # Easy clipboard and drag/drop support between host and VM.
        vb.customize                  ['modifyvm', :id, '--clipboard-mode', 'bidirectional']
        vb.customize                  ['modifyvm', :id, '--draganddrop', 'bidirectional']
        # Allow other VMs to borrow memory from this one.
        vb.customize                  ['modifyvm', :id, '--guestmemoryballoon', 512]
        # Allow VMs to share memory pages when those pages are identical.
        # This works best when there are multiple instances of the same OS
        # running simultaneously. It weakens "security" slightly, but perfect
        # security is not a goal for this project.
        vb.customize                  ['modifyvm', :id, '--pagefusion', 'on']
        # Automatically send a "shutdown" event if the window's close box is clicked.
        vb.customize                  ['setextradata', :id, 'GUI/DefaultCloseAction', 'Shutdown']
        # The "virtio" interface gets slightly better performance and less CPU load,
        # and is well-supported in current Linux. https://www.virtualbox.org/manual/ch06.html
        vb.customize                  ['modifyvm', :id, '--nictype1', 'virtio']
        # The next two lines proxy dns through the host, which helps the VM do
        # a better job of coping with network changes on the host.
        vb.customize                  ['modifyvm', :id, '--natdnshostresolver1', 'on']
        vb.customize                  ['modifyvm', :id, '--natdnsproxy1', 'on']
        if File.directory?(downloads_dir = File.join(Dir.home, 'Downloads'))
            # config.vm.synced_folder is *supposed* to handle this, but I
            # had trouble getting it to do all the things I wanted
            # (mount in home directory, mount with custom uid/gid,
            # automount). Instead, the `VboxManage sharedfolder` feature
            # is used, and then setup.sh takes care of the rest.
            vb.customize              ['sharedfolder', 'add', :id, '--name', 'downloads', '--hostpath', downloads_dir]
        end
    end

    # Collect a list of parent directories that contain Vagrantfiles and "setup.sh" scripts.
    # Stop when a parent directory doesn't contain a Vagrantfile.
    setupfiles = []
    path = __dir__
    while File.dirname(path) != path && path != "/"
        if ! File.file?(File.join(path, 'Vagrantfile'))
            break
        elsif File.file?(setupfile = File.join(path, 'setup.sh'))
            setupfiles.unshift(setupfile)
        end
        path = File.dirname(path)
    end

    # Run the setup.sh file in each of the parent directories,
    # starting from the top.
    for setupfile in setupfiles do
        config.vm.provision "shell", path: setupfile
    end

    # Restart the VM to properly load the desktop environment.
    config.vm.provision "shell", inline: "reboot"

end
